{"version":3,"sources":["logo.svg","ocaml_src/tree.bs.js","ocaml_src/small_tree.bs.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Caml_exceptions","clade_ids","tree","tag","List","rep_ok","t","all_clade_ids","Caml_obj","Caml_primitive","clade_ids_uniq","Pervasives","counter","contents","empty_000","empty","Block","undefined","leaf_no_params","sci_name","zip_no_params","trees","print_spaces","n","x","print_vert_helper","_ds","_pos","end_str","pos","ds","h","print_verts","console","log","print_branch","print_tree","print_tree_helper","_t_lst","d","t_lst","new_ds","dog","Tree$PhyloLibWeb","cat","mouse","dog_cat","SmallTree","dog_cat_mouse","z","App","printFile","a","file","document","getElementById","files","text","useState","num","setNum","className","src","logo","alt","type","name","onChange","e","result","i","factorial","target","value","id","title","onClick","href","rel","Tree","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ed9a1cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n\nimport * as List from \"bs-platform/lib/es6/list.js\";\nimport * as Block from \"bs-platform/lib/es6/block.js\";\nimport * as Caml_obj from \"bs-platform/lib/es6/caml_obj.js\";\nimport * as Pervasives from \"bs-platform/lib/es6/pervasives.js\";\nimport * as Caml_primitive from \"bs-platform/lib/es6/caml_primitive.js\";\nimport * as Caml_exceptions from \"bs-platform/lib/es6/caml_exceptions.js\";\n\nvar UnknownClade = Caml_exceptions.create(\"Tree-PhyloLibWeb.UnknownClade\");\n\nfunction clade_ids(tree) {\n  if (tree.tag) {\n    return /* [] */0;\n  } else {\n    return /* :: */[\n            tree[/* clade_id */0],\n            List.flatten(List.map(clade_ids, tree[/* children */1]))\n          ];\n  }\n}\n\nfunction clade_ids_uniq(t) {\n  var all_clade_ids = clade_ids(t);\n  return Caml_obj.caml_equal(List.sort_uniq(Caml_primitive.caml_int_compare, all_clade_ids), List.sort(Caml_primitive.caml_int_compare, all_clade_ids));\n}\n\nfunction rep_ok(t) {\n  if (clade_ids_uniq(t)) {\n    return t;\n  } else {\n    return Pervasives.failwith(\"clade_ids not unique\");\n  }\n}\n\nvar counter = {\n  contents: 0\n};\n\nvar empty_000 = /* clade_id */(counter.contents = counter.contents + 1 | 0, counter.contents);\n\nvar empty = /* Clade */Block.__(0, [\n    empty_000,\n    /* children : [] */0,\n    /* bootstrap */undefined,\n    /* rank */undefined,\n    /* id */undefined,\n    /* name */undefined\n  ]);\n\nfunction is_empty(info) {\n  if (info.tag || !(info[/* children */1] === /* [] */0 && info[/* bootstrap */2] === undefined && info[/* rank */3] === undefined && info[/* id */4] === undefined)) {\n    return false;\n  } else {\n    return info[/* name */5] === undefined;\n  }\n}\n\nfunction leaf(sci_name, id, name) {\n  return /* Leaf */Block.__(1, [\n            /* scientific_name */sci_name,\n            /* id */id,\n            /* name */name\n          ]);\n}\n\nfunction leaf_no_params(sci_name) {\n  return /* Leaf */Block.__(1, [\n            /* scientific_name */sci_name,\n            /* id */undefined,\n            /* name */undefined\n          ]);\n}\n\nfunction size_helper(tree, size) {\n  if (tree.tag) {\n    return size + 1 | 0;\n  }\n  var match = tree[/* children */1];\n  if (match) {\n    return 1 + List.fold_left((function (acc, x) {\n                  return acc + size_helper(x, size) | 0;\n                }), 0, /* :: */[\n                match[0],\n                match[1]\n              ]) | 0;\n  } else {\n    return size;\n  }\n}\n\nfunction size(tree) {\n  return size_helper(tree, 0);\n}\n\nfunction zip(trees, bootstrap, rank, parsed_id, name) {\n  if (empty.tag) {\n    return Pervasives.failwith(\"Representation invariant broken\");\n  } else {\n    return rep_ok(/* Clade */Block.__(0, [\n                  /* clade_id */(counter.contents = counter.contents + 1 | 0, counter.contents),\n                  /* children */trees,\n                  /* bootstrap */bootstrap,\n                  /* rank */rank,\n                  /* id */parsed_id,\n                  /* name */name\n                ]));\n  }\n}\n\nfunction zip_no_params(trees) {\n  if (empty.tag) {\n    return Pervasives.failwith(\"Representation invariant broken\");\n  } else {\n    return rep_ok(/* Clade */Block.__(0, [\n                  /* clade_id */(counter.contents = counter.contents + 1 | 0, counter.contents),\n                  /* children */trees,\n                  /* bootstrap */undefined,\n                  /* rank */undefined,\n                  /* id */undefined,\n                  /* name */undefined\n                ]));\n  }\n}\n\nfunction hierarchy(a, b) {\n  if (a.tag) {\n    if (b.tag) {\n      return Caml_primitive.caml_string_compare(a[/* scientific_name */0], b[/* scientific_name */0]);\n    } else {\n      return -1;\n    }\n  } else if (b.tag) {\n    return 1;\n  } else {\n    return Caml_primitive.caml_int_compare(a[/* clade_id */0], b[/* clade_id */0]);\n  }\n}\n\nfunction is_equal(a, b) {\n  if (a.tag) {\n    if (b.tag) {\n      return a[/* scientific_name */0] === b[/* scientific_name */0];\n    } else {\n      return false;\n    }\n  }\n  if (b.tag) {\n    return false;\n  }\n  var s1 = List.sort(hierarchy, a[/* children */1]);\n  var s2 = List.sort(hierarchy, b[/* children */1]);\n  var _a = s1;\n  var _b = s2;\n  var _acc = true;\n  while(true) {\n    var acc = _acc;\n    var b$1 = _b;\n    var a$1 = _a;\n    if (acc === false) {\n      return false;\n    }\n    if (!a$1) {\n      if (b$1) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n    if (!b$1) {\n      return false;\n    }\n    _acc = is_equal(a$1[0], b$1[0]);\n    _b = b$1[1];\n    _a = a$1[1];\n    continue ;\n  };\n}\n\nfunction mem(s, t) {\n  if (t.tag) {\n    return t[/* scientific_name */0] === s;\n  } else {\n    return List.fold_left((function (acc, tree) {\n                  if (acc) {\n                    return true;\n                  } else {\n                    return mem(s, tree);\n                  }\n                }), false, t[/* children */1]);\n  }\n}\n\nfunction print_spaces(n) {\n  for(var x = 1; x <= n; ++x){\n    Pervasives.print_char(/* \" \" */32);\n  }\n  \n}\n\nfunction print_vert_helper(_ds, _pos, end_str) {\n  while(true) {\n    var pos = _pos;\n    var ds = _ds;\n    if (!ds) {\n      return ;\n    }\n    var t = ds[1];\n    var h = ds[0];\n    if (h === pos && h !== 0) {\n      print_spaces(1);\n    } else {\n      print_spaces(((h - pos | 0) << 1) + (\n            h === 0 || pos === 0 ? 0 : 1\n          ) | 0);\n    }\n    if (t === /* [] */0) {\n      Pervasives.print_string(end_str);\n    } else {\n      Pervasives.print_char(/* \"|\" */124);\n    }\n    _pos = h + 1 | 0;\n    _ds = t;\n    continue ;\n  };\n}\n\nfunction print_verts(ds) {\n  print_vert_helper(List.rev(ds), 0, \"|\");\n  console.log(\"\");\n  \n}\n\nfunction print_branch(ds) {\n  if (ds) {\n    return print_vert_helper(List.rev(ds), 0, \"o-\");\n  } else {\n    return Pervasives.invalid_arg(\"ds\");\n  }\n}\n\nfunction print_tree_helper(_t_lst, d, ds) {\n  while(true) {\n    var t_lst = _t_lst;\n    if (!t_lst) {\n      return ;\n    }\n    var t = t_lst[1];\n    var h = t_lst[0];\n    if (h.tag) {\n      if (ds !== /* [] */0) {\n        print_verts(ds);\n      } else {\n        Pervasives.print_newline(undefined);\n      }\n      if (ds !== /* [] */0) {\n        print_branch(ds);\n      }\n      console.log(h[/* scientific_name */0]);\n      _t_lst = t;\n      continue ;\n    }\n    var new_ds = t !== /* [] */0 ? /* :: */[\n        d,\n        ds\n      ] : (\n        ds ? /* :: */[\n            d,\n            ds[1]\n          ] : /* :: */[\n            d,\n            /* [] */0\n          ]\n      );\n    if (ds !== /* [] */0) {\n      print_verts(ds);\n    }\n    if (ds !== /* [] */0) {\n      print_branch(ds);\n    }\n    Pervasives.print_string(\"C\\n\");\n    print_tree_helper(h[/* children */1], d + 1 | 0, new_ds);\n    _t_lst = t;\n    continue ;\n  };\n}\n\nfunction print_tree(t) {\n  return print_tree_helper(/* :: */[\n              t,\n              /* [] */0\n            ], 0, /* [] */0);\n}\n\nexport {\n  UnknownClade ,\n  empty ,\n  is_empty ,\n  leaf ,\n  leaf_no_params ,\n  size ,\n  zip ,\n  zip_no_params ,\n  mem ,\n  is_equal ,\n  print_tree ,\n  \n}\n/* empty Not a pure module */\n","// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n\nimport * as Tree$PhyloLibWeb from \"./tree.bs.js\";\n\nvar dog = Tree$PhyloLibWeb.leaf_no_params(\"dog\");\n\nvar cat = Tree$PhyloLibWeb.leaf_no_params(\"cat\");\n\nvar mouse = Tree$PhyloLibWeb.leaf_no_params(\"mouse\");\n\nvar dog_cat = Tree$PhyloLibWeb.zip_no_params(/* :: */[\n      dog,\n      /* :: */[\n        cat,\n        /* [] */0\n      ]\n    ]);\n\nvar dog_cat_mouse = Tree$PhyloLibWeb.zip_no_params(/* :: */[\n      dog_cat,\n      /* :: */[\n        mouse,\n        /* [] */0\n      ]\n    ]);\n\nvar z = Tree$PhyloLibWeb.zip_no_params(/* :: */[\n      mouse,\n      /* :: */[\n        dog_cat,\n        /* [] */0\n      ]\n    ]);\n\nvar SmallTree = {\n  dog: dog,\n  cat: cat,\n  mouse: mouse,\n  dog_cat: dog_cat,\n  dog_cat_mouse: dog_cat_mouse,\n  z: z\n};\n\nexport {\n  SmallTree ,\n  \n}\n/* dog Not a pure module */\n","import React, { useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport * as Tree from './ocaml_src/tree.bs';\r\nimport { SmallTree } from './ocaml_src/small_tree.bs';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const factorial = (n) => {\r\n    let result = 1;\r\n    for (let i = 2; i <= n; i++) {\r\n      result *= i;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const printEmptyTree = () => {\r\n    Tree.print_tree(Tree.empty);\r\n  };\r\n\r\n  const printSmallTree = () => {\r\n    Tree.print_tree(SmallTree.dog_cat);\r\n    Tree.print_tree(SmallTree.dog_cat_mouse);\r\n  };\r\n\r\n  const printFile = async () => {\r\n    try {\r\n      const file = document.getElementById('dnaFiles').files[0];\r\n      var text = await file.text();\r\n      console.log(text);\r\n    } catch (e) {\r\n      console.log('File printing failed');\r\n    }\r\n  };\r\n\r\n  const [num, setNum] = useState(0);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>Learn React and save to reload.</p>\r\n        <p>Factorial: {num}</p>\r\n        <div>\r\n          <input\r\n            type=\"number\"\r\n            name=\"Factorial\"\r\n            onChange={(e) => setNum(factorial(e.target.value))}\r\n          />\r\n        </div>\r\n        <input type=\"file\" id=\"dnaFiles\" />\r\n        <button title=\"Print file contents\" onClick={printFile} />\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <button title=\"Print Tree to Console\" onClick={printEmptyTree} />\r\n        <button title=\"Print Small Tree to Console\" onClick={printSmallTree} />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}