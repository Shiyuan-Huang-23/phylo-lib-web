{"version":3,"sources":["logo.svg","ocaml_src/tree.bs.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UnknownClade","Caml_exceptions","clade_ids","tree","tag","info","clade_id","List","children","rep_ok","t","all_clade_ids","Caml_obj","Caml_primitive","clade_ids_uniq","Pervasives","counter","contents","empty","Block","bootstrap","undefined","rank","id","name","hierarchy","a","b","scientific_name","print_spaces","n","x","print_vert_helper","_ds","_pos","end_str","pos","ds","h","print_verts","console","log","print_branch","Tree","is_empty","info$1","leaf","sci_name","leaf_no_params","size","size_helper","match","acc","zip","trees","parsed_id","zip_no_params","mem","s","is_equal","_a","_b","_acc","b$1","a$1","print_tree","print_tree_helper","_t_lst","d","t_lst","new_ds","App","useState","num","setNum","className","src","logo","alt","type","onChange","e","result","i","factorial","target","value","href","rel","title","onClick","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f93f43ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n\nimport * as List from \"bs-platform/lib/es6/list.js\";\nimport * as Block from \"bs-platform/lib/es6/block.js\";\nimport * as Caml_obj from \"bs-platform/lib/es6/caml_obj.js\";\nimport * as Pervasives from \"bs-platform/lib/es6/pervasives.js\";\nimport * as Caml_primitive from \"bs-platform/lib/es6/caml_primitive.js\";\nimport * as Caml_exceptions from \"bs-platform/lib/es6/caml_exceptions.js\";\n\nvar UnknownClade = Caml_exceptions.create(\"Tree-PhyloLibWeb.Tree.UnknownClade\");\n\nfunction clade_ids(tree) {\n  if (tree.tag) {\n    return /* [] */0;\n  }\n  var info = tree[0];\n  return /* :: */[\n          info.clade_id,\n          List.flatten(List.map(clade_ids, info.children))\n        ];\n}\n\nfunction clade_ids_uniq(t) {\n  var all_clade_ids = clade_ids(t);\n  return Caml_obj.caml_equal(List.sort_uniq(Caml_primitive.caml_int_compare, all_clade_ids), List.sort(Caml_primitive.caml_int_compare, all_clade_ids));\n}\n\nfunction rep_ok(t) {\n  if (clade_ids_uniq(t)) {\n    return t;\n  } else {\n    return Pervasives.failwith(\"clade_ids not unique\");\n  }\n}\n\nvar counter = {\n  contents: 0\n};\n\nvar empty = /* Clade */Block.__(0, [{\n      clade_id: (counter.contents = counter.contents + 1 | 0, counter.contents),\n      children: /* [] */0,\n      bootstrap: undefined,\n      rank: undefined,\n      id: undefined,\n      name: undefined\n    }]);\n\nfunction is_empty(info) {\n  if (info.tag) {\n    return false;\n  }\n  var info$1 = info[0];\n  if (info$1.children === /* [] */0 && info$1.bootstrap === undefined && info$1.rank === undefined && info$1.id === undefined) {\n    return info$1.name === undefined;\n  } else {\n    return false;\n  }\n}\n\nfunction leaf(sci_name, id, name) {\n  return /* Leaf */Block.__(1, [{\n              scientific_name: sci_name,\n              id: id,\n              name: name\n            }]);\n}\n\nfunction leaf_no_params(sci_name) {\n  return /* Leaf */Block.__(1, [{\n              scientific_name: sci_name,\n              id: undefined,\n              name: undefined\n            }]);\n}\n\nfunction size_helper(tree, size) {\n  if (tree.tag) {\n    return size + 1 | 0;\n  }\n  var match = tree[0].children;\n  if (match) {\n    return 1 + List.fold_left((function (acc, x) {\n                  return acc + size_helper(x, size) | 0;\n                }), 0, /* :: */[\n                match[0],\n                match[1]\n              ]) | 0;\n  } else {\n    return size;\n  }\n}\n\nfunction size(tree) {\n  return size_helper(tree, 0);\n}\n\nfunction zip(trees, bootstrap, rank, parsed_id, name) {\n  if (empty.tag) {\n    return Pervasives.failwith(\"Representation invariant broken\");\n  } else {\n    return rep_ok(/* Clade */Block.__(0, [{\n                    clade_id: (counter.contents = counter.contents + 1 | 0, counter.contents),\n                    children: trees,\n                    bootstrap: bootstrap,\n                    rank: rank,\n                    id: parsed_id,\n                    name: name\n                  }]));\n  }\n}\n\nfunction zip_no_params(trees) {\n  if (empty.tag) {\n    return Pervasives.failwith(\"Representation invariant broken\");\n  }\n  var x = empty[0];\n  return rep_ok(/* Clade */Block.__(0, [{\n                  clade_id: (counter.contents = counter.contents + 1 | 0, counter.contents),\n                  children: trees,\n                  bootstrap: x.bootstrap,\n                  rank: x.rank,\n                  id: x.id,\n                  name: x.name\n                }]));\n}\n\nfunction hierarchy(a, b) {\n  if (a.tag) {\n    if (b.tag) {\n      return Caml_primitive.caml_string_compare(a[0].scientific_name, b[0].scientific_name);\n    } else {\n      return -1;\n    }\n  } else if (b.tag) {\n    return 1;\n  } else {\n    return Caml_primitive.caml_int_compare(a[0].clade_id, b[0].clade_id);\n  }\n}\n\nfunction is_equal(a, b) {\n  if (a.tag) {\n    if (b.tag) {\n      return a[0].scientific_name === b[0].scientific_name;\n    } else {\n      return false;\n    }\n  }\n  if (b.tag) {\n    return false;\n  }\n  var s1 = List.sort(hierarchy, a[0].children);\n  var s2 = List.sort(hierarchy, b[0].children);\n  var _a = s1;\n  var _b = s2;\n  var _acc = true;\n  while(true) {\n    var acc = _acc;\n    var b$1 = _b;\n    var a$1 = _a;\n    if (acc === false) {\n      return false;\n    }\n    if (!a$1) {\n      if (b$1) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n    if (!b$1) {\n      return false;\n    }\n    _acc = is_equal(a$1[0], b$1[0]);\n    _b = b$1[1];\n    _a = a$1[1];\n    continue ;\n  };\n}\n\nfunction mem(s, t) {\n  if (t.tag) {\n    return t[0].scientific_name === s;\n  } else {\n    return List.fold_left((function (acc, tree) {\n                  if (acc) {\n                    return true;\n                  } else {\n                    return mem(s, tree);\n                  }\n                }), false, t[0].children);\n  }\n}\n\nfunction print_spaces(n) {\n  for(var x = 1; x <= n; ++x){\n    Pervasives.print_char(/* \" \" */32);\n  }\n  \n}\n\nfunction print_vert_helper(_ds, _pos, end_str) {\n  while(true) {\n    var pos = _pos;\n    var ds = _ds;\n    if (!ds) {\n      return ;\n    }\n    var t = ds[1];\n    var h = ds[0];\n    if (h === pos && h !== 0) {\n      print_spaces(1);\n    } else {\n      print_spaces(((h - pos | 0) << 1) + (\n            h === 0 || pos === 0 ? 0 : 1\n          ) | 0);\n    }\n    if (t === /* [] */0) {\n      Pervasives.print_string(end_str);\n    } else {\n      Pervasives.print_char(/* \"|\" */124);\n    }\n    _pos = h + 1 | 0;\n    _ds = t;\n    continue ;\n  };\n}\n\nfunction print_verts(ds) {\n  print_vert_helper(List.rev(ds), 0, \"|\");\n  console.log(\"\");\n  \n}\n\nfunction print_branch(ds) {\n  if (ds) {\n    return print_vert_helper(List.rev(ds), 0, \"o-\");\n  } else {\n    return Pervasives.invalid_arg(\"ds\");\n  }\n}\n\nfunction print_tree_helper(_t_lst, d, ds) {\n  while(true) {\n    var t_lst = _t_lst;\n    if (!t_lst) {\n      return ;\n    }\n    var t = t_lst[1];\n    var h = t_lst[0];\n    if (h.tag) {\n      if (ds !== /* [] */0) {\n        print_verts(ds);\n      } else {\n        Pervasives.print_newline(undefined);\n      }\n      if (ds !== /* [] */0) {\n        print_branch(ds);\n      }\n      console.log(h[0].scientific_name);\n      _t_lst = t;\n      continue ;\n    }\n    var new_ds = t !== /* [] */0 ? /* :: */[\n        d,\n        ds\n      ] : (\n        ds ? /* :: */[\n            d,\n            ds[1]\n          ] : /* :: */[\n            d,\n            /* [] */0\n          ]\n      );\n    if (ds !== /* [] */0) {\n      print_verts(ds);\n    }\n    if (ds !== /* [] */0) {\n      print_branch(ds);\n    }\n    Pervasives.print_string(\"C\\n\");\n    print_tree_helper(h[0].children, d + 1 | 0, new_ds);\n    _t_lst = t;\n    continue ;\n  };\n}\n\nfunction print_tree(t) {\n  return print_tree_helper(/* :: */[\n              t,\n              /* [] */0\n            ], 0, /* [] */0);\n}\n\nvar Tree = {\n  UnknownClade: UnknownClade,\n  empty: empty,\n  is_empty: is_empty,\n  leaf: leaf,\n  leaf_no_params: leaf_no_params,\n  size: size,\n  zip: zip,\n  zip_no_params: zip_no_params,\n  mem: mem,\n  is_equal: is_equal,\n  print_tree: print_tree\n};\n\nexport {\n  Tree ,\n  \n}\n/* empty Not a pure module */\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport { Tree } from './ocaml_src/tree.bs';\nimport './App.css';\n\nfunction App() {\n  const factorial = (n) => {\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  };\n\n  const printEmptyTree = () => {\n    Tree.print_tree(Tree.empty);\n  };\n\n  const [num, setNum] = useState(0);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Learn React and save to reload.</p>\n        <p>Factorial: {num}</p>\n        <div>\n          <input\n            type=\"number\"\n            name=\"Factorial\"\n            onChange={(e) => setNum(factorial(e.target.value))}\n          />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <button title=\"Print Tree to Console\" onClick={printEmptyTree} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}