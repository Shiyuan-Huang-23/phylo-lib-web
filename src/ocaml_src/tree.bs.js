// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Char from "bs-platform/lib/es6/char.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_primitive from "bs-platform/lib/es6/caml_primitive.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";

var UnknownClade = Caml_exceptions.create("Tree-PhyloLibWeb.UnknownClade");

function clade_ids(tree) {
  if (tree.TAG) {
    return /* [] */0;
  } else {
    return {
            hd: tree.clade_id,
            tl: List.flatten(List.map(clade_ids, tree.children))
          };
  }
}

function clade_ids_uniq(t) {
  var all_clade_ids = clade_ids(t);
  return Caml_obj.caml_equal(List.sort_uniq(Caml_primitive.caml_int_compare, all_clade_ids), List.sort(Caml_primitive.caml_int_compare, all_clade_ids));
}

function rep_ok(t) {
  if (clade_ids_uniq(t)) {
    return t;
  } else {
    return Pervasives.failwith("clade_ids not unique");
  }
}

var counter = {
  contents: 0
};

var empty_0 = (counter.contents = counter.contents + 1 | 0, counter.contents);

var empty = {
  TAG: /* Clade */0,
  clade_id: empty_0,
  children: /* [] */0,
  bootstrap: undefined,
  rank: undefined,
  id: undefined,
  name: undefined
};

function is_empty(info) {
  if (info.TAG || !(info.children === /* [] */0 && info.bootstrap === undefined && info.rank === undefined && info.id === undefined)) {
    return false;
  } else {
    return info.name === undefined;
  }
}

function leaf(sci_name, id, name) {
  return {
          TAG: /* Leaf */1,
          scientific_name: sci_name,
          id: id,
          name: name
        };
}

function leaf_no_params(sci_name) {
  return {
          TAG: /* Leaf */1,
          scientific_name: sci_name,
          id: undefined,
          name: undefined
        };
}

function size_helper(tree, size) {
  if (tree.TAG) {
    return size + 1 | 0;
  }
  var match = tree.children;
  if (match) {
    return 1 + List.fold_left((function (acc, x) {
                  return acc + size_helper(x, size) | 0;
                }), 0, {
                hd: match.hd,
                tl: match.tl
              }) | 0;
  } else {
    return size;
  }
}

function size(tree) {
  return size_helper(tree, 0);
}

function zip(trees, bootstrap, rank, parsed_id, name) {
  if (empty.TAG) {
    return Pervasives.failwith("Representation invariant broken");
  } else {
    return rep_ok({
                TAG: /* Clade */0,
                clade_id: (counter.contents = counter.contents + 1 | 0, counter.contents),
                children: trees,
                bootstrap: bootstrap,
                rank: rank,
                id: parsed_id,
                name: name
              });
  }
}

function zip_no_params(trees) {
  if (empty.TAG) {
    return Pervasives.failwith("Representation invariant broken");
  } else {
    return rep_ok({
                TAG: /* Clade */0,
                clade_id: (counter.contents = counter.contents + 1 | 0, counter.contents),
                children: trees,
                bootstrap: undefined,
                rank: undefined,
                id: undefined,
                name: undefined
              });
  }
}

function hierarchy(a, b) {
  if (a.TAG) {
    if (b.TAG) {
      return Caml_primitive.caml_string_compare(a.scientific_name, b.scientific_name);
    } else {
      return -1;
    }
  } else if (b.TAG) {
    return 1;
  } else {
    return Caml_primitive.caml_int_compare(a.clade_id, b.clade_id);
  }
}

function is_equal(a, b) {
  if (a.TAG) {
    if (b.TAG) {
      return a.scientific_name === b.scientific_name;
    } else {
      return false;
    }
  }
  if (b.TAG) {
    return false;
  }
  var s1 = List.sort(hierarchy, a.children);
  var s2 = List.sort(hierarchy, b.children);
  var _a = s1;
  var _b = s2;
  var _acc = true;
  while(true) {
    var acc = _acc;
    var b$1 = _b;
    var a$1 = _a;
    if (acc === false) {
      return false;
    }
    if (!a$1) {
      if (b$1) {
        return false;
      } else {
        return true;
      }
    }
    if (!b$1) {
      return false;
    }
    _acc = is_equal(a$1.hd, b$1.hd);
    _b = b$1.tl;
    _a = a$1.tl;
    continue ;
  };
}

function mem(s, t) {
  if (t.TAG) {
    return t.scientific_name === s;
  } else {
    return List.fold_left((function (acc, tree) {
                  if (acc) {
                    return true;
                  } else {
                    return mem(s, tree);
                  }
                }), false, t.children);
  }
}

var printing = {
  contents: true
};

var print_output = {
  contents: ""
};

function print_char(c) {
  if (printing.contents) {
    return Pervasives.print_char(c);
  } else {
    print_output.contents = print_output.contents + Char.escaped(c);
    return ;
  }
}

function print_string(s) {
  if (printing.contents) {
    return Pervasives.print_string(s);
  } else {
    print_output.contents = print_output.contents + s;
    return ;
  }
}

function print_endline(s) {
  if (printing.contents) {
    console.log(s);
    return ;
  } else {
    return print_string(s + "\n");
  }
}

function print_spaces(n) {
  for(var x = 1; x <= n; ++x){
    print_char(/* " " */32);
  }
  
}

function print_vert_helper(_ds, _pos, end_str) {
  while(true) {
    var pos = _pos;
    var ds = _ds;
    if (!ds) {
      return ;
    }
    var t = ds.tl;
    var h = ds.hd;
    if (h === pos && h !== 0) {
      print_spaces(1);
    } else {
      print_spaces(((h - pos | 0) << 1) + (
            h === 0 || pos === 0 ? 0 : 1
          ) | 0);
    }
    if (t === /* [] */0) {
      print_string(end_str);
    } else {
      print_char(/* "|" */124);
    }
    _pos = h + 1 | 0;
    _ds = t;
    continue ;
  };
}

function print_verts(ds) {
  print_vert_helper(List.rev(ds), 0, "|");
  return print_endline("");
}

function print_branch(ds) {
  if (ds) {
    return print_vert_helper(List.rev(ds), 0, "o-");
  } else {
    return Pervasives.invalid_arg("ds");
  }
}

function print_tree_helper(_t_lst, d, ds) {
  while(true) {
    var t_lst = _t_lst;
    if (!t_lst) {
      return ;
    }
    var t = t_lst.tl;
    var h = t_lst.hd;
    if (h.TAG) {
      if (ds !== /* [] */0) {
        print_verts(ds);
      } else {
        Pervasives.print_newline(undefined);
      }
      if (ds !== /* [] */0) {
        print_branch(ds);
      }
      var n = h.name;
      if (n !== undefined && h.scientific_name === "Unnamed") {
        print_endline(n);
      } else {
        print_endline(h.scientific_name);
      }
      _t_lst = t;
      continue ;
    }
    var new_ds = t !== /* [] */0 ? ({
          hd: d,
          tl: ds
        }) : (
        ds ? ({
              hd: d,
              tl: ds.tl
            }) : ({
              hd: d,
              tl: /* [] */0
            })
      );
    if (ds !== /* [] */0) {
      print_verts(ds);
    }
    if (ds !== /* [] */0) {
      print_branch(ds);
    }
    print_string("C\n");
    print_tree_helper(h.children, d + 1 | 0, new_ds);
    _t_lst = t;
    continue ;
  };
}

function to_string(t) {
  print_output.contents = "";
  printing.contents = false;
  print_tree_helper({
        hd: t,
        tl: /* [] */0
      }, 0, /* [] */0);
  return print_output.contents;
}

function print_tree(t) {
  printing.contents = true;
  return print_tree_helper({
              hd: t,
              tl: /* [] */0
            }, 0, /* [] */0);
}

export {
  UnknownClade ,
  empty ,
  is_empty ,
  leaf ,
  leaf_no_params ,
  size ,
  zip ,
  zip_no_params ,
  mem ,
  is_equal ,
  to_string ,
  print_tree ,
  
}
/* empty Not a pure module */
